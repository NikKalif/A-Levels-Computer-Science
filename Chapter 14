1) 
a)

xs = ["hello", "yeet", "kalif"]
ys = ["yeet", "hi", "saurav"]

def merge(xs, ys):

    result = []

    for i in xs:
        for j in ys:
            if i == j:
                result.append(i)
                break

    return result

print(merge(xs, ys))

b)

xs = ["hello", "yeet", "kalif"]
ys = ["yeet", "hi", "saurav"]

def merge(xs, ys):

    result = []

    for i in xs:
        for j in ys:
            if i == j:
                break
            else:
                result.append(i)
                break
    return result

print(merge(xs, ys))


c)

xs = ["hello", "yeet", "kalif"]
ys = ["yeet", "hi", "saurav"]

def merge(xs, ys):

    result = []

    for i in ys:
            for j in xs:
                if i == j:
                    break
            else:
                result.append(i)
    return result

print(merge(xs, ys))

d)

xs = ["hello", "yeet", "kalif"]
ys = ["yeet", "hi", "saurav"]

def merge(xs, ys):

    result = []

    for i in ys:
        result.append(i)
    for i in xs:
        result.append(i)

    return result

print(merge(xs, ys))

e)

numbers= [5,7,11,11,11,12,13]
ko = [7,8,11]

def merge(xs, ys):

    list1 = xs.copy()
    list2 = ys.copy()
    for i in list1:
        if i in list2:
            list1.remove(i)
            list2.remove(i)
    return list1

print(merge(numbers, ko))

2)

def has_clashes(the_board):
    """ Determine whether we have any queens clashing on the diagonals.
        We're assuming here that the_board is a permutation of column
        numbers, so we're not explicitly checking row or column clashes.
    """
    for col in range(1,len(the_board)):
        if col_clashes(the_board, col):
            return True
    return False

def col_clashes(bs, c):
    """ Return True if the queen at column c clashes
         with any queen to its left.
    """
    for i in range(c):     # Look at all columns to the left of c
          if share_diagonal(i, bs[i], c, bs[c]):
              return True

    return False

def share_diagonal(x0, y0, x1, y1):
    """ Is (x0, y0) on a shared diagonal with (x1, y1)? """
    dy = abs(y1 - y0)        # Calc the absolute y distance
    dx = abs(x1 - x0)        # CXalc the absolute x distance
    return dx == dy          # They clash if dx == dy

def main():
    import random
    rng = random.Random()   # Instantiate a generator

    bd = list(range(16))     # Generate the initial permutation
    num_found = 0
    tries = 0
    while num_found < 10:
       rng.shuffle(bd)
       tries += 1
       if not has_clashes(bd):
           print("Found solution {0} in {1} tries.".format(bd, tries))
           tries = 0
           num_found += 1

main()

3)

def main():
    import random
    rng = random.Random()   # Instantiate a generator

    bd = list(range(8))     # Generate the initial permutation
    num_found = 0
    tries = 0
    solution = []
    while num_found < 10:
       rng.shuffle(bd)
       tries += 1
       if not has_clashes(bd):
           print("Found solution {0} in {1} tries.".format(bd, tries))
           solution.append(bd)
           tries = 0
           num_found += 1
    return solution

print(main())

5)
a)

import random
rngg = random.Random()

def yeet(x):
    result = []
    primenumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
    for i in range(6):
        randomnumber = x.randrange(1, 15)
        result.append(primenumbers[randomnumber])
    return result

print(yeet(rngg))

b)

import random
rngg = random.Random()

def yeet(x):
    result = []
    primenumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
    for i in range(6):
        randomnumber = x.randrange(1, 15)
        result.append(primenumbers[randomnumber])
    return result

print(yeet(rngg))

def compare(original, new):
    count = 0
    listcount = 0
    for i in range(6):
        if new[count] == original[count]:
            count += 1
            listcount += 1
        else:
            count += 1
            break
    print("Number of correct picks: ", listcount)

original = [1,2,3,4,5,6]
new = [1,2,3,4,4,5]
compare(original, new)

c)

import random
rngg = random.Random()

def yeet(x):
    result = []
    primenumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
    for i in range(6):
        randomnumber = x.randrange(1, 15)
        result.append(primenumbers[randomnumber])
    return result

print(yeet(rngg))

def compare(original, new):
    count = 0
    listcount = 0
    correctpicks = []
    for i in range(6):
        if new[count] == original[count]:
            correctpicks.append(new[count])
            count += 1
            listcount += 1
        else:
            count += 1
            break
    print("Number of correct picks: ", listcount)
    print(correctpicks)

my_tickets = [1,2,3,4,5,6]
new = [1,2,3,4,4,5]
compare(my_tickets, new)

d)

import random
rngg = random.Random()

def yeet(x):
    result = []
    primenumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
    for i in range(6):
        randomnumber = x.randrange(1, 15)
        result.append(primenumbers[randomnumber])
    return result

print(yeet(rngg))

def compare(original, new):
    count = 0
    listcount = 0
    correctpicks = []
    prime = 0
    primecount = 0
    primelist = [2,3,5,7,11,13,17,19,23,29,31,37,41]
    for p in primelist:
        if new[prime] == p[prime]:
            prime += 1
            primecount += 1
        else:
            prime += 1
            break
    for i in range(6):
        if new[count] == original[count]:
            correctpicks.append(new[count])
            count += 1
            listcount += 1
        else:
            count += 1
            break
    print("Number of correct picks: ", listcount)
    print(correctpicks)
    print("No. of prime numbers: ", primecount)

my_tickets = [1,2,3,4,5,6]
new = [1,2,3,4,4,5]
compare(my_tickets, new)
