1. 

import math

class Point:
    def __init__(self):
        self.x = 0
        self.y = 0

p = Point()
q = Point()

def distance(point1, point2):
    result = math.sqrt((point2.x-point1.x)**2 + (point2.y-point1.y)**2)
    print(result)

distance(p,q)

2. 

class Point:
    def __init__(self):
        self.x = 0
        self.y = 0

p = Point()
q = Point()

p.x = 3
p.y = 10

def reflect_x(point):
    point.y -= 2*point.y

    print(point.x)
    print(point.y)

reflect_x(p)

3.

class Point: #Blue Print / architectural plan / template
    def __init__(self):
        self.x = 0
        self.y = 0

    def slope_from_origin(self):
        if self.y < 0:
            self.y -= 2*self.y
        if self.x < 0:
            self.x -= 2*self.x
        gradient = self.y / self.x
        print(gradient)



p = Point()
q = Point()

p.x = -3 #Actual individual house
p.y = -100

p.slope_from_origin()

4.

class Point: #Blue Print / architectural plan / template
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def get_line_to(self,newpoint):
        x1 = self.x
        x2 = newpoint.x
        y1 = self.y
        y2 = newpoint.y
        if self.x - newpoint.x == 0:
            m = "Infinite"
            return m
        else:
            ytemp = newpoint.y - self.y
            m = ytemp / (newpoint.x - self.x)
            c = self.y - m*self.x
            return (m,c)

point1 = Point(4,11)
point2 = Point(6, 15)

print(point1.get_line_to(point2))
