import turtle
wn = turtle.Screen()
wn.bgcolor("lightgreen")
wn.title("Alex and Tess")
tess = turtle.Turtle()

tess.color("blue", "red")
tess.pensize(3)

xs = [48, 117, 200, 240, 160, 260, 220]

def draw_bar(t, height):
    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.write(" "+ str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.end_fill()
    t.forward(10)

for v in xs:
    draw_bar(tess, v)

wn.mainloop()

-

1)

import random 
x=str(random.randint(0,6))

if x == "0":
    print("Sunday")
elif x == "1":
    print("Monday")
elif x == "2":
    print("Tuesday")
elif x == "3":
    print("Wednesday")
elif x == "4":
    print("Thursday")
elif x == "5":
    print("Friday")
else:
    print("Saturday")
    
- 

2)

startday = int(input("Starting Day?"))
length = int(input("How long are you staying?"))
remainder = (length%7)
endday = str(remainder + startday)

if endday == "0":
    print("Sunday")
elif endday == "1":
    print("Monday")
elif endday == "2":
    print("Tuesday")
elif endday == "3":
    print("Wednesday")
elif endday == "4":
    print("Thursday")
elif endday == "5":
    print("Friday")
else:
    print("Saturday")
    
- 

3) 

a <= b
a < b
a < 18 and day != 3
a < 18 and day == 3

4) 

3 equals 3
3 Does not equal 3
3 is more than or equal to 4
---

5) 

T
T
T
T
T
T
F
T

6)

mark = int(input("Raw mark?"))

if mark >= 75:
    print("First")
elif mark >70 or mark <75:
    print("Upper Second")
elif mark >60 or mark <70:
    print("Second")
elif mark >50 or mark <60:
    print("Third")
elif mark >45 or mark <50:
    print("F1 Supp")
elif mark >40 or mark <45:
    print("F2")
else: 
    print("F3")

7)

import turtle
wn = turtle.Screen()
wn.bgcolor("lightgreen")
wn.title("Alex and Tess")
tess = turtle.Turtle()

tess.color("blue", "red")
tess.pensize(3)

xs = [48, 117, 200, 240, 160, 260, 220]

def draw_bar(t, height):
    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.write(" "+ str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.penup()
    t.end_fill()
    t.forward(10)
    t.pendown()

for v in xs:
    draw_bar(tess, v)

wn.mainloop()

8) 

import turtle
wn = turtle.Screen()
wn.title("Alex and Tess")
wn.bgcolor("orange")
tess = turtle.Turtle()

tess.color("blue", "red")
tess.pensize(3)

xs = [48, 117, 200, 240, 160, 260, 220]

def draw_bar(t, height):
    if(height >=200):
        t.color("blue")
    elif(height <200 and height >100):
        t.color("yellow")
    elif(height <100):
        t.color("green")
    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.write(" "+ str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.penup()
    t.end_fill()
    t.forward(10)
    t.pendown()

for v in xs:
    draw_bar(tess, v)

wn.mainloop()

9) 

import turtle
wn = turtle.Screen()
wn.title("Alex and Tess")
wn.bgcolor("orange")
tess = turtle.Turtle()

tess.color("blue", "red")
tess.pensize(3)

xs = [-48, 117, 200, 240, 160, 260, 220, -10]

def negative_draw(t, height):
    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.penup()
    t.backward(20)
    t.write(" "+ str(height))
    t.forward(20)
    t.pendown()
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.penup()
    t.end_fill()
    t.forward(10)
    t.pendown()

def draw_bar(t, height):
    if(height >=200):
        t.color("blue")
    elif(height <200 and height >100):
        t.color("yellow")
    elif(height <100 and height >=0):
        t.color("green")
    elif(height <0):
        negative_draw(tess, v)
        return
    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.write(" "+ str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.penup()
    t.end_fill()
    t.forward(10)
    t.pendown()

for v in xs:
    draw_bar(tess, v)

wn.mainloop()

10) 

def find_hypot(x, y):
    hypot2 = ((x**2) + (y**2))
    finalhypot = (hypot2**0.5)
    print(int(finalhypot))

opposite = int(input("Length of opposite?"))
adjacent = int(input("Length of adjacent?"))
find_hypot(opposite, adjacent)

11)

--
